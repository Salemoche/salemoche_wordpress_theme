"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _webpack = _interopRequireDefault(require("webpack"));

var _webpackSources = _interopRequireDefault(require("webpack-sources"));

var _schemaUtils = _interopRequireDefault(require("schema-utils"));

var _CssDependency = _interopRequireDefault(require("./CssDependency"));

var _pluginOptions = _interopRequireDefault(require("./plugin-options.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable class-methods-use-this */
const {
  ConcatSource,
  SourceMapSource,
  OriginalSource
} = _webpackSources.default;
const {
  Template,
  util: {
    createHash
  }
} = _webpack.default;
const MODULE_TYPE = 'css/mini-extract';
const pluginName = 'mini-css-extract-plugin';
const REGEXP_CHUNKHASH = /\[chunkhash(?::(\d+))?\]/i;
const REGEXP_CONTENTHASH = /\[contenthash(?::(\d+))?\]/i;
const REGEXP_NAME = /\[name\]/i;
const REGEXP_PLACEHOLDERS = /\[(name|id|chunkhash)\]/g;
const REGEXP_SKIN = /(?:\?|%3F|&|%26)skin(?:=|%3D)([^|&% ]*)(?:\||%7C)?([^&% ]*)/i;
const REGEXP_FILENAME = /^(.+[\\/])?([^.]+\.)/;
const REGEXP_CSSNAME = /\+(?:chunkId|\({.+}\[chunkId\]\|\|chunkId\))\+/;
const DEFAULT_FILENAME = '[name].css';

function isRedundantObject(obj) {
  let key;
  let flag = true;

  for (key in obj) {
    // eslint-disable-next-line eqeqeq
    if (key == obj[key]) {
      delete obj[key]; // eslint-disable-line no-param-reassign
    } else {
      flag = false;
    }
  }

  return flag;
}

function getCssChunkObject(mainChunk) {
  const obj = {};

  for (const chunk of mainChunk.getAllAsyncChunks()) {
    for (const module of chunk.modulesIterable) {
      if (module.type === MODULE_TYPE) {
        obj[chunk.id] = 1;
        break;
      }
    }
  }

  return obj;
}

function getRenderedModules(chunk) {
  const skins = {};
  let skin;

  for (const module of chunk.modulesIterable) {
    if (module.type === MODULE_TYPE) {
      skin = (REGEXP_SKIN.exec(module.identifier()) || [])[1] || '';
      (skins[skin] || (skins[skin] = [])).push(module);
    }
  }

  return skins;
}

function getSkinMap(mainChunk) {
  const skins = [];
  const skinMap = {};
  let skin;
  let chunkSkins;
  let temp;
  let len;

  for (const chunk of mainChunk.getAllAsyncChunks()) {
    chunkSkins = [];

    for (const module of chunk.modulesIterable) {
      if (module.type === MODULE_TYPE) {
        skin = (REGEXP_SKIN.exec(module.identifier()) || [])[1] || '';

        if (!skins.includes(skin)) {
          skins.push(skin);
        }

        if (!chunkSkins.includes(skin)) {
          len = chunkSkins.length;

          if (len) {
            // make sure chunkSkins in the same order as skins
            temp = skins.indexOf(skin);

            while (len) {
              len -= 1;

              if (skins.indexOf(chunkSkins[len]) < temp) {
                chunkSkins.splice(len + 1, 0, skin);
                break;
              } else if (!len) {
                chunkSkins.unshift(skin);
              }
            }
          } else {
            chunkSkins.push(skin);
          }
        }
      }
    }

    if (chunkSkins.length) {
      // identify group
      temp = chunkSkins.join();
      (skinMap[temp] || (skinMap[temp] = [])).push(chunk.id);
    }
  }

  len = 0; // eslint-disable-next-line guard-for-in

  for (skin in skinMap) {
    temp = skinMap[skin].length;

    if (temp > len) {
      len = temp;
      chunkSkins = skin;
    }
  }

  if (len) {
    delete skinMap[chunkSkins];
    chunkSkins = chunkSkins.split(',');
    const map = {};
    const info = {};
    let lack;
    let extra;
    len = 0; // eslint-disable-next-line guard-for-in

    for (skin in skinMap) {
      len += 1;

      for (temp of skinMap[skin]) {
        map[temp] = len;
      }

      skin = skin.split(',');
      lack = [];
      extra = [];

      for (temp of skins) {
        if (skin.includes(temp)) {
          if (!chunkSkins.includes(temp)) {
            extra.push(temp);
          }
        } else if (chunkSkins.includes(temp)) {
          lack.push(temp);
        }
      }

      info[len] = {
        l: lack.length ? lack : undefined,
        // eslint-disable-line no-undefined
        e: extra.length ? extra : undefined // eslint-disable-line no-undefined

      };
    }

    return {
      skins: chunkSkins,
      map: len && map,
      info: len && info
    };
  }

  return null;
}

class CssDependencyTemplate {
  apply() {}

}

class CssModule extends _webpack.default.Module {
  constructor(dependency) {
    super(MODULE_TYPE, dependency.context);
    this.id = '';
    this._identifier = dependency.identifier;
    this._identifierIndex = dependency.identifierIndex;
    this.content = dependency.content;
    this.media = dependency.media;
    this.sourceMap = dependency.sourceMap;
  } // no source() so webpack doesn't do add stuff to the bundle


  size() {
    return this.content.length;
  }

  identifier() {
    return `css ${this._identifier} ${this._identifierIndex}`;
  }

  readableIdentifier(requestShortener) {
    return `css ${requestShortener.shorten(this._identifier)}${this._identifierIndex ? ` (${this._identifierIndex})` : ''}`;
  }

  nameForCondition() {
    const resource = this._identifier.split('!').pop();

    const idx = resource.indexOf('?');

    if (idx >= 0) {
      return resource.substring(0, idx);
    }

    return resource;
  }

  updateCacheModule(module) {
    this.content = module.content;
    this.media = module.media;
    this.sourceMap = module.sourceMap;
  }

  needRebuild() {
    return true;
  }

  build(options, compilation, resolver, fileSystem, callback) {
    this.buildInfo = {};
    this.buildMeta = {};
    callback();
  }

  updateHash(hash) {
    super.updateHash(hash);
    hash.update(this.content);
    hash.update(this.media || '');
    hash.update(this.sourceMap ? JSON.stringify(this.sourceMap) : '');
  }

}

class CssModuleFactory {
  create({
    dependencies: [dependency]
  }, callback) {
    callback(null, new CssModule(dependency));
  }

}

class MiniCssExtractPlugin {
  constructor(options = {}) {
    (0, _schemaUtils.default)(_pluginOptions.default, options, 'Mini CSS Extract Plugin');
    this.options = Object.assign({
      filename: DEFAULT_FILENAME,
      moduleFilename: () => this.options.filename || DEFAULT_FILENAME,
      ignoreOrder: false
    }, options);

    if (!this.options.chunkFilename) {
      const {
        filename
      } = this.options; // Anything changing depending on chunk is fine

      if (filename.match(REGEXP_PLACEHOLDERS)) {
        this.options.chunkFilename = filename;
      } else {
        // Elsewise prefix '[id].' in front of the basename to make it changing
        this.options.chunkFilename = filename.replace(/(^|\/)([^/]*(?:\?|$))/, '$1[id].$2');
      }
    }
  }

  apply(compiler) {
    compiler.hooks.thisCompilation.tap(pluginName, compilation => {
      compilation.dependencyFactories.set(_CssDependency.default, new CssModuleFactory());
      compilation.dependencyTemplates.set(_CssDependency.default, new CssDependencyTemplate());
      compilation.mainTemplate.hooks.renderManifest.tap(pluginName, (result, {
        chunk
      }) => {
        const renderedModules = getRenderedModules(chunk); // eslint-disable-next-line guard-for-in

        for (const skin in renderedModules) {
          result.push({
            render: () => this.renderContentAsset(compilation, chunk, renderedModules[skin], compilation.runtimeTemplate.requestShortener),
            filenameTemplate: ({
              chunk: chunkData
            }) => this.options.moduleFilename(chunkData).replace(REGEXP_FILENAME, `$1${skin ? `${skin}@` : ''}$2`),
            pathOptions: {
              chunk,
              contentHashType: MODULE_TYPE
            },
            identifier: `${pluginName}.${chunk.id}${skin ? `@${skin}` : ''}`,
            hash: chunk.contentHash[MODULE_TYPE]
          });
        }
      });
      compilation.chunkTemplate.hooks.renderManifest.tap(pluginName, (result, {
        chunk
      }) => {
        const renderedModules = getRenderedModules(chunk); // eslint-disable-next-line guard-for-in

        for (const skin in renderedModules) {
          result.push({
            render: () => this.renderContentAsset(compilation, chunk, renderedModules[skin], compilation.runtimeTemplate.requestShortener),
            filenameTemplate: this.options.chunkFilename.replace(REGEXP_FILENAME, `$1${skin ? `${skin}@` : ''}$2`),
            pathOptions: {
              chunk,
              contentHashType: MODULE_TYPE
            },
            identifier: `${pluginName}.${chunk.id}${skin ? `@${skin}` : ''}`,
            hash: chunk.contentHash[MODULE_TYPE]
          });
        }
      });
      compilation.mainTemplate.hooks.hashForChunk.tap(pluginName, (hash, chunk) => {
        const {
          chunkFilename
        } = this.options;

        if (REGEXP_CHUNKHASH.test(chunkFilename)) {
          hash.update(JSON.stringify(chunk.getChunkMaps(true).hash));
        }

        if (REGEXP_CONTENTHASH.test(chunkFilename)) {
          hash.update(JSON.stringify(chunk.getChunkMaps(true).contentHash[MODULE_TYPE] || {}));
        }

        if (REGEXP_NAME.test(chunkFilename)) {
          hash.update(JSON.stringify(chunk.getChunkMaps(true).name));
        }
      });
      compilation.hooks.contentHash.tap(pluginName, chunk => {
        const {
          outputOptions
        } = compilation;
        const {
          hashFunction,
          hashDigest,
          hashDigestLength
        } = outputOptions;
        const hash = createHash(hashFunction);

        for (const m of chunk.modulesIterable) {
          if (m.type === MODULE_TYPE) {
            m.updateHash(hash);
          }
        }

        const {
          contentHash
        } = chunk;
        contentHash[MODULE_TYPE] = hash.digest(hashDigest).substring(0, hashDigestLength);
      });
      const {
        mainTemplate
      } = compilation;
      mainTemplate.hooks.localVars.tap(pluginName, (source, chunk) => {
        const chunkMap = getCssChunkObject(chunk);

        if (Object.keys(chunkMap).length > 0) {
          return Template.asString([source, '', '// object to store loaded CSS chunks', 'var installedCssChunks = {', Template.indent(chunk.ids.map(id => `${JSON.stringify(id)}: 0`).join(',\n')), '}']);
        }

        return source;
      });
      mainTemplate.hooks.requireEnsure.tap(pluginName, (source, chunk, hash) => {
        const chunkMap = getCssChunkObject(chunk);

        if (Object.keys(chunkMap).length > 0) {
          const chunkMaps = chunk.getChunkMaps();
          const {
            crossOriginLoading
          } = mainTemplate.outputOptions;
          const linkHrefPath = mainTemplate.getAssetPath(JSON.stringify(this.options.chunkFilename), {
            hash: `" + ${mainTemplate.renderCurrentHashCode(hash)} + "`,
            hashWithLength: length => `" + ${mainTemplate.renderCurrentHashCode(hash, length)} + "`,
            chunk: {
              id: '" + chunkId + "',
              hash: `" + ${isRedundantObject(chunkMaps.hash) ? 'chunkId' : `(${JSON.stringify(chunkMaps.hash)}[chunkId] || chunkId)`} + "`,

              hashWithLength(length) {
                const shortChunkHashMap = Object.create(null);

                for (const chunkId of Object.keys(chunkMaps.hash)) {
                  if (typeof chunkMaps.hash[chunkId] === 'string') {
                    shortChunkHashMap[chunkId] = chunkMaps.hash[chunkId].substring(0, length);
                  }
                }

                return `" + ${isRedundantObject(shortChunkHashMap) ? 'chunkId' : `(${JSON.stringify(shortChunkHashMap)}[chunkId] || chunkId)`} + "`;
              },

              contentHash: {
                [MODULE_TYPE]: `" + ${isRedundantObject(chunkMaps.contentHash[MODULE_TYPE]) ? 'chunkId' : `(${JSON.stringify(chunkMaps.contentHash[MODULE_TYPE])}[chunkId] || chunkId)`} + "`
              },
              contentHashWithLength: {
                [MODULE_TYPE]: length => {
                  const shortContentHashMap = {};
                  const contentHash = chunkMaps.contentHash[MODULE_TYPE];

                  for (const chunkId of Object.keys(contentHash)) {
                    if (typeof contentHash[chunkId] === 'string') {
                      shortContentHashMap[chunkId] = contentHash[chunkId].substring(0, length);
                    }
                  }

                  return `" + ${isRedundantObject(shortContentHashMap) ? 'chunkId' : `(${JSON.stringify(shortContentHashMap)}[chunkId] || chunkId)`} + "`;
                }
              },
              // for REGEXP_CSSNAME +(chunkId)+
              name: `" +${isRedundantObject(chunkMaps.name) ? 'chunkId' : `(${JSON.stringify(chunkMaps.name)}[chunkId]||chunkId)`}+ "`
            },
            contentHashType: MODULE_TYPE
          });
          const prefix = Template.asString([source, '', `// ${pluginName} CSS loading`, `var cssChunks = ${JSON.stringify(chunkMap)};`, 'if(installedCssChunks[chunkId]) { promises.push(installedCssChunks[chunkId]); }', 'else if(installedCssChunks[chunkId] !== 0 && cssChunks[chunkId]) {']);
          const cssChunkLoaderCommon = Template.asString([`var fullhref = ${mainTemplate.requireFn}.p + href, DOC = document, tag;`, 'for (', Template.indent(['var existingTags = [', Template.indent(["DOC.querySelectorAll('link[rel=\"' + REL + '\"]'),", 'DOC.querySelectorAll("style")']), '], i = 0, list, j;', 'i < 2;', 'i++']), ') {', Template.indent(['for ( list = existingTags[i], j = 0; j < list.length; j++ ) {', Template.indent(['tag = (tag = list[j]).getAttribute("data-href") || tag.getAttribute("href");', 'if(tag === href || tag === fullhref) { return resolve(); }']), '}']), '}', 'tag = DOC.createElement("link");', 'tag.type = "text/css";']);
          const cssChunkLoaderAppend = `tag.href = fullhref;\n${crossOriginLoading ? `tag.href.indexOf(location.origin + '/') || (tag.crossOrigin = ${JSON.stringify(crossOriginLoading)});` : ''}\nDOC.head.appendChild(tag);`;
          const then = 'then(function() { installedCssChunks[chunkId] = 0; })';
          const skinMap = getSkinMap(chunk);

          if (skinMap) {
            let index = REGEXP_CSSNAME.exec(linkHrefPath);

            if (index) {
              // eslint-disable-next-line prefer-destructuring
              index = index.index;
              return Template.asString([prefix, Template.indent([`var skins = ${JSON.stringify(skinMap.skins)};`, `var alternate = ${skinMap.map ? `${JSON.stringify(skinMap.map)}[chunkId]` : 0};`, // 一群工具人(要空间要速度不要易读)
              'var len, skin, path, hash, sheet;', `if (alternate && (alternate = ${skinMap.info ? `${JSON.stringify(skinMap.info)}[alternate]` : 0})) {`, Template.indent(['var lLen = alternate.l && alternate.l.length;', 'if (lLen) {', Template.indent(['sheet = [], len = skins.length, path = hash = 0;', 'while (path < len) {', Template.indent(['skin = skins[path++];', 'while (hash < lLen) { if (skin === alternate.l[hash++]) { skin = 0; break; } }', 'skin && sheet.push(skin);']), '}']), '} else { sheet = skins; }', 'alternate.e && (sheet = sheet.concat(alternate.e));', 'skins = sheet;']), '}', 'if ((len = skins.length)) {', Template.indent([`path = ${linkHrefPath.substring(0, index)};`, `hash = ${linkHrefPath.substring(index + 1)};`, 'sheet = "stylesheet";', 'alternate = "alternate ";', 'skin = function(title) {', Template.indent(['return new Promise(function(resolve, reject) {', Template.indent([`var isAlternate = title && title != (window.${process.env.SKIN_FIELD || '__SKIN__'} || "${process.env.SKIN || 'default'}");`, `var href = path + (title ? title + '@' : '') + hash;`, 'var REL = isAlternate ? alternate + sheet : sheet', cssChunkLoaderCommon, 'title && (tag.title = title)', 'isAlternate ? resolve((tag.disabled = true)) : (tag.onload = title ? function (event) {', Template.indent(['tag.onload = null;', 'tag.disabled = true;', 'tag.disabled = false;', 'resolve(event);']), '} : resolve);', 'tag.onerror = function() {', Template.indent(['tag.parentNode.removeChild(tag);', 'delete installedCssChunks[chunkId];', `if (isAlternate) { return console.warn("加载备用皮肤" + chunkId + ":" + fullhref + "失败!"); }`, 'var err = new Error("加载" + chunkId + ":" + fullhref + "失败!");', 'err.code = "CSS_CHUNK_LOAD_FAILED";', 'err.request = fullhref;', 'reject(err);']), '};', 'tag.rel = REL;', cssChunkLoaderAppend]), '});']), '};', 'while(len--) { skins[len] = skin(skins[len]); }', `promises.push(installedCssChunks[chunkId] = Promise.all(skins).${then});`]), '}']), '}']);
            }
          }

          return Template.asString([prefix, Template.indent(['promises.push(installedCssChunks[chunkId] = new Promise(function(resolve, reject) {', Template.indent(['var REL = "stylesheet";', `var href = ${linkHrefPath};`, cssChunkLoaderCommon, 'tag.rel = REL;', 'tag.onload = resolve;', 'tag.onerror = function() {', Template.indent(['tag.parentNode.removeChild(tag);', 'delete installedCssChunks[chunkId];', 'var err = new Error("加载" + chunkId + ":" + fullhref + "失败!");', 'err.code = "CSS_CHUNK_LOAD_FAILED";', 'err.request = fullhref;', 'reject(err);']), '};', cssChunkLoaderAppend]), `}).${then});`]), '}']);
        }

        return source;
      });
    });
  }

  renderContentAsset(compilation, chunk, modules, requestShortener) {
    let usedModules;
    const [chunkGroup] = chunk.groupsIterable;

    if (typeof chunkGroup.getModuleIndex2 === 'function') {
      // Store dependencies for modules
      const moduleDependencies = new Map(modules.map(m => [m, new Set()]));
      const moduleDependenciesReasons = new Map(modules.map(m => [m, new Map()])); // Get ordered list of modules per chunk group
      // This loop also gathers dependencies from the ordered lists
      // Lists are in reverse order to allow to use Array.pop()

      const modulesByChunkGroup = Array.from(chunk.groupsIterable, cg => {
        const sortedModules = modules.map(m => {
          return {
            module: m,
            index: cg.getModuleIndex2(m)
          };
        }) // eslint-disable-next-line no-undefined
        .filter(item => item.index !== undefined).sort((a, b) => b.index - a.index).map(item => item.module);

        for (let i = 0; i < sortedModules.length; i++) {
          const set = moduleDependencies.get(sortedModules[i]);
          const reasons = moduleDependenciesReasons.get(sortedModules[i]);

          for (let j = i + 1; j < sortedModules.length; j++) {
            const module = sortedModules[j];
            set.add(module);
            const reason = reasons.get(module) || new Set();
            reason.add(cg);
            reasons.set(module, reason);
          }
        }

        return sortedModules;
      }); // set with already included modules in correct order

      usedModules = new Set();

      const unusedModulesFilter = m => !usedModules.has(m);

      while (usedModules.size < modules.length) {
        let success = false;
        let bestMatch;
        let bestMatchDeps; // get first module where dependencies are fulfilled

        for (const list of modulesByChunkGroup) {
          // skip and remove already added modules
          while (list.length > 0 && usedModules.has(list[list.length - 1])) {
            list.pop();
          } // skip empty lists


          if (list.length !== 0) {
            const module = list[list.length - 1];
            const deps = moduleDependencies.get(module); // determine dependencies that are not yet included

            const failedDeps = Array.from(deps).filter(unusedModulesFilter); // store best match for fallback behavior

            if (!bestMatchDeps || bestMatchDeps.length > failedDeps.length) {
              bestMatch = list;
              bestMatchDeps = failedDeps;
            }

            if (failedDeps.length === 0) {
              // use this module and remove it from list
              usedModules.add(list.pop());
              success = true;
              break;
            }
          }
        }

        if (!success) {
          // no module found => there is a conflict
          // use list with fewest failed deps
          // and emit a warning
          const fallbackModule = bestMatch.pop();

          if (!this.options.ignoreOrder) {
            const reasons = moduleDependenciesReasons.get(fallbackModule);
            compilation.warnings.push(new Error([`chunk ${chunk.name || chunk.id} [${pluginName}]`, 'Conflicting order. Following module has been added:', ` * ${fallbackModule.readableIdentifier(requestShortener)}`, 'despite it was not able to fulfill desired ordering with these modules:', ...bestMatchDeps.map(m => {
              const goodReasonsMap = moduleDependenciesReasons.get(m);
              const goodReasons = goodReasonsMap && goodReasonsMap.get(fallbackModule);
              const failedChunkGroups = Array.from(reasons.get(m), cg => cg.name).join(', ');
              const goodChunkGroups = goodReasons && Array.from(goodReasons, cg => cg.name).join(', ');
              return [` * ${m.readableIdentifier(requestShortener)}`, `   - couldn't fulfill desired order of chunk group(s) ${failedChunkGroups}`, goodChunkGroups && `   - while fulfilling desired order of chunk group(s) ${goodChunkGroups}`].filter(Boolean).join('\n');
            })].join('\n')));
          }

          usedModules.add(fallbackModule);
        }
      }
    } else {
      // fallback for older webpack versions
      // (to avoid a breaking change)
      // TODO remove this in next major version
      // and increase minimum webpack version to 4.12.0
      modules.sort((a, b) => a.index2 - b.index2);
      usedModules = modules;
    }

    const source = new ConcatSource();
    const externalsSource = new ConcatSource();

    for (const m of usedModules) {
      if (/^@import url/.test(m.content)) {
        // HACK for IE
        // http://stackoverflow.com/a/14676665/1458162
        let {
          content
        } = m;

        if (m.media) {
          // insert media into the @import
          // this is rar
          // TODO improve this and parse the CSS to support multiple medias
          content = content.replace(/;|\s*$/, m.media);
        }

        externalsSource.add(content);
        externalsSource.add('\n');
      } else {
        if (m.media) {
          source.add(`@media ${m.media} {\n`);
        }

        if (m.sourceMap) {
          source.add(new SourceMapSource(m.content, m.readableIdentifier(requestShortener), m.sourceMap));
        } else {
          source.add(new OriginalSource(m.content, m.readableIdentifier(requestShortener)));
        }

        source.add('\n');

        if (m.media) {
          source.add('}\n');
        }
      }
    }

    return new ConcatSource(externalsSource, source);
  }

}

MiniCssExtractPlugin.loader = require.resolve('./loader');
var _default = MiniCssExtractPlugin;
exports.default = _default;